{

        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "",
        "Parameters": {
            "DeploymentConfigurationName": {
                "Description": "With predefined configurations, you can deploy application revisions to one instance at a time, half of the instances at a time, or all the instances at once.",
                "Type": "String",
                "Default": "CodeDeployDefault.OneAtATime",
                "ConstraintDescription": "Must be a valid Deployment configuration name"
            },
            "SourceObjectKey": {
                "Description": "S3 source artifact",
                "Type": "String",
                "Default": "app.zip"
            },
            "InstanceType": {
                "Description": "WebServer EC2 instance type",
                "Type": "String",
                "Default": "t2.micro",
                "AllowedValues": [
                    "t1.micro",
                    "t2.nano",
                    "t2.micro",
                    "t2.small",
                    "t2.medium",
                    "t2.large"

                ],
                "ConstraintDescription": "must be a valid EC2 instance type."
            },
            "OperatorEMail": {
                "Description": "EMail address to notify if there are any scaling operations",
                "Type": "String",
                "Default": "nobody@amazone.com",
                "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
                "ConstraintDescription": "must be a valid email address."
            },
            "KeyName": {
                "Description": "The EC2 Key Pair to allow SSH access to the instances",
                "Type": "AWS::EC2::KeyPair::KeyName",
                "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
            },
            "SSHLocation": {
                "Description": "The IP address range that can be used to SSH to the EC2 instances",
                "Type": "String",
                "MinLength": "9",
                "MaxLength": "18",
                "Default": "0.0.0.0/0",
                "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
                "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
            }
        },
        "Mappings": {
            "Region2Examples": {
                "us-east-1": {
                    "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
                }

            },
            "AWSInstanceType2Arch": {
                "t1.micro": {
                    "Arch": "HVM64"
                },
                "t2.nano": {
                    "Arch": "HVM64"
                },
                "t2.micro": {
                    "Arch": "HVM64"
                }
            },
            "AWSInstanceType2NATArch": {
                "t1.micro": {
                    "Arch": "NATHVM64"
                },
                "t2.nano": {
                    "Arch": "NATHVM64"
                },
                "t2.micro": {
                    "Arch": "NATHVM64"
                }
            },
            "AWSRegionArch2AMI": {
                "us-east-1": {
                    "HVM64": "ami-0ff8a91507f77f867",
                    "HVMG2": "ami-0a584ac55a7631c0c"
                }
            }
        },

        "Resources": {
            "SourceBucket": {
                "Type": "AWS::S3::Bucket",
                "Properties": {
                    "VersioningConfiguration": {
                        "Status": "Enabled"
                    }
                }
            },
            "CodeDeployEC2Permission": {
                "Type": "AWS::IAM::InstanceProfile",
                "Properties": {
                    "Path": "/",
                    "Roles": [
                        {
                            "Ref": "CodeDeployEC2Role"
                        }
                    ]
                }
            },
            "CodeDeployEC2Role": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": [
                                        "ec2.amazonaws.com"
                                    ]
                                },
                                "Action": [
                                    "sts:AssumeRole"
                                ]
                            }
                        ]
                    },
                    "Path": "/"
                }
            },
            "myEC2RolePolicies": {
                "Type": "AWS::IAM::Policy",
                "Properties": {
                    "PolicyName": "myPolicyEC2",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:Get*",
                                    "s3:List*"
                                ],
                                "Resource": "*"
                            }
                        ]
                    },
                    "Roles": [
                        {
                            "Ref": "CodeDeployEC2Role"
                        }
                    ]
                }
            },
            "NotificationTopic": {
                "Type": "AWS::SNS::Topic",
                "Properties": {
                    "TopicName": "AutoscalingNotification",
                    "Subscription": [
                        {
                            "Endpoint": {
                                "Ref": "OperatorEMail"
                            },
                            "Protocol": "email"
                        }
                    ]
                }
            },
            "SNSTopicPolicy": {
                "Type": "AWS::SNS::TopicPolicy",
                "Properties": {
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "events.amazonaws.com"
                                },
                                "Action": [
                                    "SNS:Publish"
                                ],
                                "Resource": {
                                    "Ref": "NotificationTopic"
                                }
                            }
                        ]
                    },
                    "Topics": [
                        {
                            "Ref": "NotificationTopic"
                        }
                    ]
                }
            },
            "WebServerGroup": {
                "Type": "AWS::AutoScaling::AutoScalingGroup",
                "Properties": {
                    "AvailabilityZones": {
                        "Fn::GetAZs": ""
                    },
                    "LaunchConfigurationName": {
                        "Ref": "LaunchConfig"
                    },
                    "MinSize": "1",
                    "MaxSize": "3",
                    "LoadBalancerNames": [
                        {
                            "Ref": "ElasticLoadBalancer"
                        }
                    ],
                    "NotificationConfiguration": {
                        "TopicARN": {
                            "Ref": "NotificationTopic"
                        },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                        ]
                    }
                },
                "CreationPolicy": {
                    "ResourceSignal": {
                        "Timeout": "PT15M",
                        "Count": "1"
                    }
                },
                "UpdatePolicy": {
                    "AutoScalingRollingUpdate": {
                        "MinInstancesInService": "1",
                        "MaxBatchSize": "1",
                        "PauseTime": "PT15M",
                        "WaitOnResourceSignals": "true"
                    }
                }
            },
            "LaunchConfig": {
                "Type": "AWS::AutoScaling::LaunchConfiguration",
                "Metadata": {
                    "Comment": "Install a simple application",
                    "AWS::CloudFormation::Init": {
                        "config": {
                            "packages": {
                                "yum": {
                                    "nginx": []
                                }
                            },
                            "files": {
                                "/usr/share/nginx/html/index.html": {
                                    "content": {
                                        "Fn::Join": [
                                            "\n",
                                            [
                                                "<img src=\"",
                                                {
                                                    "Fn::FindInMap": [
                                                        "Region2Examples",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        "Examples"
                                                    ]
                                                },
                                                "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                                                "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                                            ]
                                        ]
                                    },
                                    "mode": "000644",
                                    "owner": "root",
                                    "group": "root"
                                },
                                "/etc/cfn/cfn-hup.conf": {
                                    "content": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "[main]\n",
                                                "stack=",
                                                {
                                                    "Ref": "AWS::StackId"
                                                },
                                                "\n",
                                                "region=",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "\n"
                                            ]
                                        ]
                                    },
                                    "mode": "000400",
                                    "owner": "root",
                                    "group": "root"
                                },
                                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                    "content": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "[cfn-auto-reloader-hook]\n",
                                                "triggers=post.update\n",
                                                "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                                "action=/opt/aws/bin/cfn-init -v ",
                                                "         --stack ",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "         --resource LaunchConfig ",
                                                "         --region ",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "\n",
                                                "runas=root\n"
                                            ]
                                        ]
                                    }
                                }
                            },
                            "services": {
                                "sysvinit": {
                                    "nginx": {
                                        "enabled": "true",
                                        "ensureRunning": "true",
                                        "files": [
                                            "/etc/nginx/nginx.conf.default"
                                        ]
                                    },
                                    "cfn-hup": {
                                        "enabled": "true",
                                        "ensureRunning": "true",
                                        "files": [
                                            "/etc/cfn/cfn-hup.conf",
                                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "Properties": {
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSRegionArch2AMI",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "AWSInstanceType2Arch",
                                    {
                                        "Ref": "InstanceType"
                                    },
                                    "Arch"
                                ]
                            }
                        ]
                    },
                    "SecurityGroups": [
                        {
                            "Ref": "InstanceSecurityGroup"
                        }
                    ],
                    "InstanceType": {
                        "Ref": "InstanceType"
                    },
                    "IamInstanceProfile": {
                        "Ref": "CodeDeployEC2Permission"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe\n",
                                    "## Nginx setup\n",
                                    "yum install nginx -y ",
                                    "yum update -y aws-cfn-bootstrap\n",
                                    "/opt/aws/bin/cfn-init -v ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource LaunchConfig ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n",
                                    "/opt/aws/bin/cfn-signal -e $? ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource WebServerGroup ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n",
                                    "# Install the AWS CodeDeploy Agent.\n",
                                    "cd /home/ec2-user\n",
                                    "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install\n",
                                    "chmod +x ./install\n",
                                    "sudo ./install auto\n",
                                    "sudo service codedeploy-agent status\n"
                                ]
                            ]
                        }
                    }
                }
            },
            "WebServerScaleUpPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                    "AdjustmentType": "ChangeInCapacity",
                    "AutoScalingGroupName": {
                        "Ref": "WebServerGroup"
                    },
                    "Cooldown": "60",
                    "ScalingAdjustment": "1"
                }
            },
            "WebServerScaleDownPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                    "AdjustmentType": "ChangeInCapacity",
                    "AutoScalingGroupName": {
                        "Ref": "WebServerGroup"
                    },
                    "Cooldown": "60",
                    "ScalingAdjustment": "-1"
                }
            },
            "CPUAlarmHigh": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                    "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                    "MetricName": "CPUUtilization",
                    "Namespace": "AWS/EC2",
                    "Statistic": "Average",
                    "Period": "300",
                    "EvaluationPeriods": "2",
                    "Threshold": "90",
                    "AlarmActions": [
                        {
                            "Ref": "WebServerScaleUpPolicy"
                        }
                    ],
                    "Dimensions": [
                        {
                            "Name": "AutoScalingGroupName",
                            "Value": {
                                "Ref": "WebServerGroup"
                            }
                        }
                    ],
                    "ComparisonOperator": "GreaterThanThreshold"
                }
            },
            "CPUAlarmLow": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                    "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                    "MetricName": "CPUUtilization",
                    "Namespace": "AWS/EC2",
                    "Statistic": "Average",
                    "Period": "300",
                    "EvaluationPeriods": "2",
                    "Threshold": "70",
                    "AlarmActions": [
                        {
                            "Ref": "WebServerScaleDownPolicy"
                        }
                    ],
                    "Dimensions": [
                        {
                            "Name": "AutoScalingGroupName",
                            "Value": {
                                "Ref": "WebServerGroup"
                            }
                        }
                    ],
                    "ComparisonOperator": "LessThanThreshold"
                }
            },
            "ElasticLoadBalancer": {
                "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
                "Properties": {
                    "AvailabilityZones": {
                        "Fn::GetAZs": ""
                    },
                    "CrossZone": "true",
                    "Listeners": [
                        {
                            "LoadBalancerPort": "80",
                            "InstancePort": "80",
                            "Protocol": "HTTP"
                        }
                    ],
                    "HealthCheck": {
                        "Target": "HTTP:80/",
                        "HealthyThreshold": "3",
                        "UnhealthyThreshold": "5",
                        "Interval": "30",
                        "Timeout": "5"
                    }
                }
            },
            "InstanceSecurityGroup": {
                "Type": "AWS::EC2::SecurityGroup",
                "Properties": {
                    "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
                    "SecurityGroupIngress": [
                        {
                            "IpProtocol": "tcp",
                            "FromPort": "22",
                            "ToPort": "22",
                            "CidrIp": {
                                "Ref": "SSHLocation"
                            }
                        },
                        {
                            "IpProtocol": "tcp",
                            "FromPort": "80",
                            "ToPort": "80",
                            "SourceSecurityGroupOwnerId": {
                                "Fn::GetAtt": [
                                    "ElasticLoadBalancer",
                                    "SourceSecurityGroup.OwnerAlias"
                                ]
                            },
                            "SourceSecurityGroupName": {
                                "Fn::GetAtt": [
                                    "ElasticLoadBalancer",
                                    "SourceSecurityGroup.GroupName"
                                ]
                            }
                        }
                    ]
                }
            },
            "CodeDeployApplication": {
                "Type": "AWS::CodeDeploy::Application"
            },
            "CodeDeployServiceRole": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Sid": "1",
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": [
                                        "codedeploy.us-east-1.amazonaws.com"
                                    ]
                                },
                                "Action": "sts:AssumeRole"
                            }
                        ]
                    },
                    "Path": "/",
                    "Policies": [
                        {
                            "PolicyName": "codeDeployServicerRole",
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "s3:Get*",
                                            "s3:List*"
                                        ],
                                        "Resource": [
                                            "*"
                                        ]
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Resource": [
                                            "*"
                                        ],
                                        "Action": [
                                            "ec2:Describe*"
                                        ]
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Resource": [
                                            "*"
                                        ],
                                        "Action": [
                                            "autoscaling:CompleteLifecycleAction",
                                            "autoscaling:DeleteLifecycleHook",
                                            "autoscaling:DescribeLifecycleHooks",
                                            "autoscaling:DescribeAutoScalingGroups",
                                            "autoscaling:PutLifecycleHook",
                                            "autoscaling:RecordLifecycleActionHeartbeat"
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            "DeploymentGroup": {
                "Type": "AWS::CodeDeploy::DeploymentGroup",
                "Properties": {
                    "ApplicationName": {
                        "Ref": "CodeDeployApplication"
                    },
                    "AutoScalingGroups": [
                        {
                            "Ref": "WebServerGroup"
                        }
                    ],
                    "ServiceRoleArn": {
                        "Fn::GetAtt": [
                            "CodeDeployServiceRole",
                            "Arn"
                        ]
                    }
                }
            },
            "CodePipelineIAMRole": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": [
                                        "codepipeline.amazonaws.com"
                                    ]
                                },
                                "Action": "sts:AssumeRole"
                            }
                        ]
                    },
                    "Path": "/",
                    "Policies": [
                        {
                            "PolicyName": "AWS-CodePipeline-Service",
                            "PolicyDocument": {
                                "Version": "2012-10-17",
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "codecommit:CancelUploadArchive",
                                            "codecommit:GetBranch",
                                            "codecommit:GetCommit",
                                            "codecommit:GetUploadArchiveStatus",
                                            "codecommit:UploadArchive"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "codedeploy:CreateDeployment",
                                            "codedeploy:GetApplicationRevision",
                                            "codedeploy:GetDeployment",
                                            "codedeploy:GetDeploymentConfig",
                                            "codedeploy:RegisterApplicationRevision"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "codebuild:BatchGetBuilds",
                                            "codebuild:StartBuild"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "devicefarm:ListProjects",
                                            "devicefarm:ListDevicePools",
                                            "devicefarm:GetRun",
                                            "devicefarm:GetUpload",
                                            "devicefarm:CreateUpload",
                                            "devicefarm:ScheduleRun"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "lambda:InvokeFunction",
                                            "lambda:ListFunctions"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "iam:PassRole"
                                        ],
                                        "Resource": "*"
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "elasticbeanstalk:*",
                                            "ec2:*",
                                            "elasticloadbalancing:*",
                                            "autoscaling:*",
                                            "cloudwatch:*",
                                            "s3:*",
                                            "sns:*",
                                            "cloudformation:*",
                                            "rds:*",
                                            "sqs:*",
                                            "ecs:*"
                                        ],
                                        "Resource": "*"
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            "myPipeline": {
                "Type": "AWS::CodePipeline::Pipeline",
                "Properties": {
                    "Name": "myCodePipeline",
                    "RoleArn": {
                        "Fn::GetAtt": [
                            "CodePipelineIAMRole",
                            "Arn"
                        ]
                    },
                    "ArtifactStore": {
                        "Type": "S3",
                        "Location": {
                            "Ref": "SourceBucket"
                        }
                    },
                    "Stages": [
                        {
                            "Name": "Source",
                            "Actions": [
                                {
                                    "Name": "Source",
                                    "ActionTypeId": {
                                        "Category": "Source",
                                        "Owner": "AWS",
                                        "Provider": "S3",
                                        "Version": "1"
                                    },
                                    "RunOrder": 1,
                                    "Configuration": {
                                        "PollForSourceChanges": "true",
                                        "S3Bucket": {
                                            "Ref": "SourceBucket"
                                        },
                                        "S3ObjectKey": {
                                            "Ref": "SourceObjectKey"
                                        }
                                    },
                                    "OutputArtifacts": [
                                        {
                                            "Name": "SourceArtifact"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "LambdaStage",
                            "Actions": [
                                {
                                    "InputArtifacts": [],
                                    "Name": "MyLambdaAction",
                                    "ActionTypeId": {
                                        "Category": "Invoke",
                                        "Owner": "AWS",
                                        "Version": "1",
                                        "Provider": "Lambda"
                                    },
                                    "OutputArtifacts": [],
                                    "Configuration": {
                                        "FunctionName": {
                                            "Ref": "CodePipelineLambdaTest"
                                        },
                                        "UserParameters": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "http://",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ElasticLoadBalancer",
                                                            "DNSName"
                                                        ]
                                                    }
                                                ]
                                            ]
                                        }
                                    },
                                    "RunOrder": 1
                                }
                            ]
                        },
                        {
                            "Name": "Deploy",
                            "Actions": [
                                {
                                    "InputArtifacts": [
                                        {
                                            "Name": "SourceArtifact"
                                        }
                                    ],
                                    "Name": "Deployment",
                                    "ActionTypeId": {
                                        "Category": "Deploy",
                                        "Owner": "AWS",
                                        "Version": "1",
                                        "Provider": "CodeDeploy"
                                    },
                                    "Configuration": {
                                        "DeploymentGroupName": {
                                            "Ref": "DeploymentGroup"
                                        },
                                        "ApplicationName": {
                                            "Ref": "CodeDeployApplication"
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            },
            "LambdaCodePipelineExecutionPolicy": {
                "DependsOn": [
                    "CodePipelineLambdaRole"
                ],
                "Type": "AWS::IAM::Policy",
                "Properties": {
                    "PolicyName": "LambdaRolePolicy",
                    "Roles": [
                        {
                            "Ref": "CodePipelineLambdaRole"
                        }
                    ],
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "logs:*"
                                ],
                                "Resource": [
                                    "arn:aws:logs:*:*:*"
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "codepipeline:PutJobSuccessResult",
                                    "codepipeline:PutJobFailureResult"
                                ],
                                "Resource": [
                                    "*"
                                ]
                            }
                        ]
                    }
                }
            },
            "CodePipelineLambdaRole": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": [
                                        "lambda.amazonaws.com"
                                    ]
                                },
                                "Action": [
                                    "sts:AssumeRole"
                                ]
                            }
                        ]
                    },
                    "Path": "/"
                }
            },
            "CodePipelineLambdaTest": {
                "Type": "AWS::Lambda::Function",
                "DependsOn": [
                    "CodePipelineLambdaRole",
                    "LambdaCodePipelineExecutionPolicy"
                ],
                "Properties": {
                    "Code": {
                        "ZipFile": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "var AWS = require('aws-sdk');",
                                    "var http = require('http');",
                                    "exports.handler = function(event, context) {",
                                    "  var codepipeline = new AWS.CodePipeline();",
                                    "  var job = event['CodePipeline.job']",
                                    "  var jobId = job.id;",
                                    "  var url = job.data.actionConfiguration.configuration.UserParameters; ",
                                    "  function success(message) {",
                                    "    codepipeline.putJobSuccessResult({",
                                    "      jobId: jobId",
                                    "    }, function(err, data) {",
                                    "      if(err) {",
                                    "        context.fail(err);    ",
                                    "      } else {",
                                    "        context.succeed(message);    ",
                                    "      }",
                                    "    });",
                                    "  }",
                                    "  function failure(message) {",
                                    "    codepipeline.putJobFailureResult({",
                                    "      jobId: jobId,",
                                    "      failureDetails: {",
                                    "        message: JSON.stringify(message),",
                                    "        type: 'JobFailed',",
                                    "        externalExecutionId: context.invokeid",
                                    "      }",
                                    "    }, function(err, data) {",
                                    "      if(err) {",
                                    "        context.fail(err);    ",
                                    "      } else {",
                                    "        context.succeed(message);    ",
                                    "      }",
                                    "    });",
                                    "  }",
                                    "  http.get(url, function(response) {",
                                    "    var body = '';",
                                    "    response.on('data', function (chunk) {",
                                    "      body += chunk;",
                                    "    });",
                                    "    response.on('end', function () {",
                                    "      if (response.statusCode === 200 ) {",
                                    "        success('URL check successful.')",
                                    "      } else {",
                                    "        console.log(response.statusCode);",
                                    "        console.log(body);",
                                    "        failure('Invalid status code or content.');",
                                    "      }",
                                    "    });",
                                    "  }).on('error', function(error) {",
                                    "    failure(error);  ",
                                    "  });",
                                    "}"
                                ]
                            ]
                        }
                    },
                    "Role": {
                        "Fn::GetAtt": [
                            "CodePipelineLambdaRole",
                            "Arn"
                        ]
                    },
                    "Description": "Validate a website URL",
                    "Timeout": 20,
                    "Handler": "index.handler",
                    "Runtime": "nodejs8.10",
                    "MemorySize": 128
                }
            }
        },
        "Outputs": {
            "URL": {
                "Description": "The URL of the website",
                "Value": {
                    "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "DNSName"
                    ]
                }
            },
            "S3Bucket": {
              "Description":"S3 Bucket for site",
              "Value" : {"Ref" : "SourceBucket"}
            }
        }


}
